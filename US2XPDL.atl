module US2XPDL;

-- @path US=/US2XPDL/US_model/US.ecore
-- @path XPDL=/US2XPDL/XPDL_model/XPDL.ecore

create OUT: XPDL from IN: US;

helper context US!Event def: isfollowed(): Boolean=
	if  self.followed_by then
		true
	else
		false
	endif;

--helper context US!Event def: isfollowing(): Boolean=
	--US!Task.AllInstances()->exists(t | t.followed_by->includes(self));

rule ProductBacklog2Process { 
	
	from pb: US!ProductBacklog 
	
	to pr: XPDL!Process ( 
		objective <- pb.name
		)	
			
}

rule Goal2Pool {
	
	from goal: US!Goal
	
	to pool: XPDL!Pool (
		name <- goal.name
		) 
		
}	


rule Role2Lane {
	
	from role: US!Role
	
	to lane: XPDL!Lane (
		name <- role.name
		)
	
}

rule Task2Task {
	
	from t: US!Task 
	
	to ta: XPDL!Task (
		name <- t.name,
		target <- t.next
		)

}

--rule Event2EventStart{
	
	--from e: US!Event (not(e.isFollowing()))
	
	--to start: XPDL!EventStart (
		--name <- e.name	
	--)
	
--} 

--rule Event2EventIntermediate{
	
	--from e: US!Event (e.isfollowing() and e.isfollowed())
	
	--to inter: XPDL!EventIntermediate (
		--name <- e.name	
	--)
--}

rule Event2EventEnd{
	
	from e: US!Event (not (e.isfollowed()))
	
	to end: XPDL!EventEnd (
		name <- e.name	
	)
}



 

--rule Condition2Gateway 

	