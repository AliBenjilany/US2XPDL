module US2XPDL;

-- @path US=/US2XPDL/US_model/US.ecore
-- @path XPDL=/US2XPDL/XPDL_model/XPDL.ecore

create OUT: XPDL from IN: US;

helper context US!Event def: isfollowed(): Boolean=
	if  self.followed_by.notEmpty() then
		true
	else
		false
	endif;



helper context US!Event def: isfollow(e:US!Event): Boolean= 
	let allTasks : Sequence(US!Task) = US!Task.allInstances()->asSequence() in 
	allTasks->exists(t | t.next = e);


--helper def: getRoles : Set(US!Role)=
	--let allUserStories : Sequence(US!UserStory) = US!UserStory.allInstances()->asSequence() in
	--let allRoles: Set(US!Role) = allUserStories->first().role->asSet() in  
	
	--allUserStories->iterate(x ; y: US!Role=allUserStories->first().role |
	
	--allRoles->append(x.role)->asSet()
	
	--);

helper context US!Condition def: isSplit(): Boolean=
	if	self.followed_by.size()>1	then
		true
	else 
		false
	endif;



rule ProductBacklog2Process { 
	
	from pb: US!ProductBacklog 
	
	to pr: XPDL!Process ( 
		objective <- pb.name,
		pool <- pb.goals
		
		)	
			
}

rule Goal2Pool {
	
	from goal: US!Goal
	
	to pool: XPDL!Pool (
		name <- goal.name
		--lanes <- goal.userstories.role
		) 
		
}	


rule Role2Lane {
	
	from role: US!Role
	
	to lane: XPDL!Lane (
		name <- role.name
		--flowobject <- role.userstory.element
		)
	
}

rule Task2Task {
	
	from t: US!Task 
	
	to ta: XPDL!Task (
		name <- t.name,
		target <- t.next
		
		)

}

--EVENTS
rule Event2EventStart{
	
	from e: US!Event (e.isfollowed() and not e.isfollow(e) )
	
	to start: XPDL!EventStart (
		name <- e.name	
	)
	
} 

rule Event2EventIntermediate{
	
	from e: US!Event (e.isfollowed() and e.isfollow(e))
	
	to inter: XPDL!EventIntermediate (
		name <- e.name	
	)
}

rule Event2EventEnd{
	
	from e: US!Event (not e.isfollowed() and e.isfollow(e))
	
	to end: XPDL!EventEnd (
		name <- e.name	
	)
}

--CONDITIONS
rule Condition2InclusiveSplit {
	from 
		c: US!Inclusive
	to
		gw: XPDL!Inclusive(
		name <- c.name,
		split <- true
		
		)

}

rule Condition2InclusiveJoin {
	from 
		c: US!Inclusive (c.isSplit()) 
	to
		gw: XPDL!Inclusive(
		name <- c.name,
		split <- false
		
		)

}



rule Condition2ExclusiveSplit {
	from 
		c: US!Exclusive(c.isSplit()) 
	to
		gw: XPDL!Exclusive(
			name <- c.name,
			split <- true
			)
}

rule Condition2ExclusiveJoin {
	from 
		c: US!Exclusive(not c.isSplit())
	to
		gw: XPDL!Exclusive(
			name <- c.name,
			split <- false
			)
}


rule Condition2ParallelSplit {
	from 
		c: US!Parallel(c.isSplit())
	to
		gw: XPDL!Parallel(
			name <- c.name,
			split <- true
			)
} 

rule Condition2ParallelJoin {
	from 
		c: US!Parallel(not c.isSplit())
	to
		gw: XPDL!Parallel(
			name <- c.name,
			split <- false
			)
} 

	